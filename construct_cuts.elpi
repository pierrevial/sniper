pred construct_cuts i: (list term), o: term.
construct_cuts [X | XS] (app [(fun `new_hyp` X1 x\ G x), R]) :- 
    std.assert-ok! (coq.elaborate-ty-skeleton X _ X1) "cut formula illtyped",
    % \Q que veut dire le bang aprÃ¨s std.assert-ok ?
    pi x\ decl x N H1 =>
    construct_cuts XS (G x).
construct_cuts [] T.

pred args_to_terms i: (list argument), o: (list term).
args_to_terms [trm X | XS] [X | R] :- args_to_terms XS R.
args_to_terms [] [].

pred construct_cuts_args i: (list argument), o: term.
construct_cuts_args L1 R :- args_to_terms L1 L1', construct_cuts L1' R.

pred find_in_context i: term, i: goal-ctx, o: term.
    find_in_context Trm [decl Var _ Ty| XS] Var :- coq.unify-leq Trm Ty ok, !.
    find_in_context Trm [X | XS] Var :- find_in_context Trm XS Var.
    find_in_context Trm [] _ :- coq.error Trm "is not in the context".

pred refine_by_app i: term, i: goal, o: list sealed-goal.
    refine_by_app Ty (goal Ctx _ _ _ _ as G) GL :- find_in_context Ty Ctx Trm, construct_term_applied Trm Tapp, 
        refine Tapp G GL, GL = [].
    refine_by_app Ty (goal Ctx _ _ _ _ as G) GL :- find_in_context Ty Ctx Trm, construct_term_applied_unit Trm Tapp, 
        refine Tapp G GL. %when the resulting list is not empty, Elpi was not able to find the suitable instance, so we have to give it an arbitrary one 
    refine_by_app G _ GL :- coq.error "wrong proof term". 

pred number_of_polymorphic_variables i: term, o: int.
    number_of_polymorphic_variables (prod Na Ty F) N1 :- (coq.unify-leq Ty {{Type}} ok ; coq.unify-leq Ty {{Set}} ok), !,
        pi x\ decl x Na Ty => number_of_polymorphic_variables (F x) N, N1 is N + 1.
    number_of_polymorphic_variables _ 0.

pred construct_list i: int, o: list term. 
    construct_list N [ _| R] :- N > 0, !, M is (N - 1), construct_list M R.
    construct_list 0 []. 

pred construct_term_applied i: term, o: term.
    construct_term_applied I (app [I|L]) :- coq.typecheck I Ty ok, number_of_polymorphic_variables Ty NB, construct_list NB L.

pred construct_list_unit i: int, o: list term. 
    construct_list_unit N [ {{unit}}| R] :- N > 0, !, M is (N - 1), construct_list_unit M R.
    construct_list_unit 0 []. 

pred construct_term_applied_unit i: term, o: term.
    construct_term_applied_unit I (app [I|L]) :- coq.typecheck I Ty ok, number_of_polymorphic_variables Ty NB, construct_list_unit NB L.

pred refine_by_instantiation i: list sealed-goal, i: (pair term term), o: list sealed-goal.
    % refine_by_instanciation GL1 P GL2 proves all the subgoals except the first one by applying the theorem fst P (or its equivalent found in the context)
    refine_by_instantiation [G] _ [G] :- !.
    refine_by_instantiation [G1|GL1] P GL3 :- fst P T, std.last GL1 G, std.drop-last 1 GL1 GL1', 
     %when the polymorphic hypothesis is given as parameter
        construct_term_applied T Tapp, coq.ltac.open (refine Tapp) G GL2, !, std.append GL1' GL2 GL12,
        refine_by_instantiation [G1|GL12] P GL3.
    refine_by_instantiation [G1|GL1] P GL3 :- 
    %when the polymorphic hypothesis is in the context
    !, snd P Ty, std.last GL1 G, std.drop-last 1 GL1 GL1',
     coq.ltac.open (refine_by_app Ty) G GL2, !, std.append GL1' GL2 GL12,
        refine_by_instantiation [G1|GL12] P GL3.
    refine_by_instantiation [] _ [].